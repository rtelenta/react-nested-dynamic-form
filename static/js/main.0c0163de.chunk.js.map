{"version":3,"sources":["components/Button.tsx","components/ActionButtons.tsx","components/Label.tsx","components/Addresses.tsx","components/Fields.tsx","components/Form.tsx","components/Layout.tsx","components/Sidebar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","children","type","onClick","icon","fill","color","className","solid","indigo","red","outline","ActionButtons","Label","title","htmlFor","Addresses","useFormContext","control","register","fieldName","useFieldArray","name","fields","append","remove","move","defaultDirection","aria-hidden","map","index","id","street_address","city","state","postal_code","onMoveUp","length","onMoveDown","autoComplete","ref","defaultValue","Fields","Form","onSubmit","Layout","Sidebar","watch","JSON","stringify","defaultValues","country","email_address","first_name","last_name","directions","App","methods","useForm","handleSubmit","data","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c0163de.chunk.js","sourcesContent":["interface IProps {\r\n  type?: \"button\" | \"submit\";\r\n  onClick?: () => void;\r\n  icon?: React.ReactNode;\r\n  fill?: \"solid\" | \"outline\";\r\n  color?: \"indigo\" | \"red\";\r\n  className?: string;\r\n}\r\n\r\nconst Button: React.FC<IProps> = ({\r\n  children,\r\n  type = \"button\",\r\n  onClick,\r\n  icon,\r\n  fill = \"solid\",\r\n  color = \"indigo\",\r\n  className = \"\",\r\n}) => {\r\n  const fillClasses = {\r\n    solid: {\r\n      indigo:\r\n        \"text-white border-transparent bg-indigo-600 hover:bg-indigo-700 focus:ring-indigo-500\",\r\n      red:\r\n        \"text-white border-transparent bg-red-600 hover:bg-red-700 focus:ring-red-500\",\r\n    },\r\n    outline: {\r\n      indigo:\r\n        \"text-indigo-600 border-indigo-600 bg-white hover:bg-gray-50 focus:ring-indigo-500\",\r\n      red:\r\n        \"text-red-600 border-red-600 bg-white hover:bg-gray-50 focus:ring-red-500\",\r\n    },\r\n  };\r\n\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      type={type}\r\n      className={`inline-flex items-center py-2 px-3 border rounded-md shadow-sm text-sm leading-4 font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 ${fillClasses[fill][color]} ${className}`}\r\n    >\r\n      {children} {icon && <div className={children ? \"ml-2\" : \"\"}>{icon}</div>}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import Button from \"./Button\";\r\n\r\nconst ActionButtons: React.FC = () => {\r\n  return (\r\n    <div className=\"px-4 py-3 bg-gray-50 text-right sm:px-6\">\r\n      <Button type=\"submit\">Save</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActionButtons;\r\n","interface IProps {\r\n  className?: string;\r\n  title?: string;\r\n  htmlFor?: string;\r\n}\r\n\r\nconst Label: React.FC<IProps> = ({\r\n  className = \"\",\r\n  children,\r\n  title,\r\n  htmlFor,\r\n}) => {\r\n  return (\r\n    <div className={`col-span-6 ${className}`}>\r\n      <label\r\n        htmlFor={htmlFor}\r\n        className=\"block text-sm font-medium text-gray-700\"\r\n      >\r\n        {title}\r\n      </label>\r\n\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Label;\r\n","import { ArrowDown, ArrowUp, PlusCircle, XCircle } from \"react-feather\";\r\nimport { useFieldArray, useFormContext } from \"react-hook-form\";\r\nimport { defaultDirection, directionType } from \"../App\";\r\nimport Button from \"./Button\";\r\nimport Label from \"./Label\";\r\n\r\nconst Addresses: React.FC = () => {\r\n  const { control, register } = useFormContext();\r\n\r\n  const fieldName = \"directions\";\r\n\r\n  const { fields, append, remove, move } = useFieldArray<directionType>({\r\n    control,\r\n    name: fieldName,\r\n  });\r\n\r\n  const onNewDirection = () => {\r\n    append(defaultDirection);\r\n  };\r\n\r\n  const onMoveUp = (index: number) => {\r\n    const minIndex = 0;\r\n    const prevIndex = index - 1;\r\n\r\n    if (index > minIndex) move(index, prevIndex);\r\n  };\r\n\r\n  const onMoveDown = (index: number) => {\r\n    const maxIndex = fields.length - 1;\r\n    const nextIndex = index + 1;\r\n\r\n    if (index < maxIndex) move(index, nextIndex);\r\n  };\r\n\r\n  return (\r\n    <div className=\"mt-16\">\r\n      <div className=\"flex items-center\">\r\n        <h2 className=\"mr-8 text-xl\">Directions</h2>\r\n\r\n        <Button onClick={onNewDirection} fill=\"outline\" icon={<PlusCircle />}>\r\n          New direction\r\n        </Button>\r\n      </div>\r\n\r\n      <div className=\"col-span-6\" aria-hidden=\"true\">\r\n        <div className=\"py-5\">\r\n          <div className=\"border-t border-gray-200\"></div>\r\n        </div>\r\n      </div>\r\n\r\n      {fields.map(\r\n        ({ id, street_address, city, state, postal_code }, index: number) => (\r\n          <div className=\"grid grid-cols-6 gap-6 mt-4\" key={id}>\r\n            <div className=\"col-span-6\">\r\n              <div className=\"sm:flex items-center justify-between\">\r\n                <h3 className=\"font-medium mr-8 mb-4 sm:mb-0\">\r\n                  Address {index + 1}\r\n                </h3>\r\n\r\n                <div className=\"flex items-center\">\r\n                  <Button\r\n                    className=\"mr-2\"\r\n                    icon={<ArrowUp />}\r\n                    fill=\"outline\"\r\n                    onClick={() => onMoveUp(index)}\r\n                  />\r\n                  <Button\r\n                    className=\"mr-8\"\r\n                    icon={<ArrowDown />}\r\n                    fill=\"outline\"\r\n                    onClick={() => onMoveDown(index)}\r\n                  />\r\n                  <Button\r\n                    onClick={() => remove(index)}\r\n                    fill=\"outline\"\r\n                    icon={<XCircle />}\r\n                    color=\"red\"\r\n                  >\r\n                    Remove\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <Label\r\n              title=\"Street address\"\r\n              htmlFor={`${fieldName}[${index}].street_address`}\r\n            >\r\n              <input\r\n                type=\"text\"\r\n                name={`${fieldName}[${index}].street_address`}\r\n                id={`${fieldName}[${index}].street_address`}\r\n                autoComplete=\"street-address\"\r\n                className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\r\n                ref={register()}\r\n                defaultValue={street_address}\r\n              />\r\n            </Label>\r\n\r\n            <Label\r\n              title=\"City\"\r\n              htmlFor={`${fieldName}[${index}].city`}\r\n              className=\"sm:col-span-6 lg:col-span-2\"\r\n            >\r\n              <input\r\n                type=\"text\"\r\n                name={`${fieldName}[${index}].city`}\r\n                id={`${fieldName}[${index}].city`}\r\n                className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\r\n                ref={register()}\r\n                defaultValue={city}\r\n              />\r\n            </Label>\r\n\r\n            <Label\r\n              title=\"State / Province\"\r\n              htmlFor={`${fieldName}[${index}].state`}\r\n              className=\"sm:col-span-6 lg:col-span-2\"\r\n            >\r\n              <input\r\n                type=\"text\"\r\n                name={`${fieldName}[${index}].state`}\r\n                id={`${fieldName}[${index}].state`}\r\n                className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\r\n                ref={register()}\r\n                defaultValue={state}\r\n              />\r\n            </Label>\r\n\r\n            <Label\r\n              title=\"ZIP / Postal\"\r\n              htmlFor={`${fieldName}[${index}].postal_code`}\r\n              className=\"sm:col-span-6 lg:col-span-2\"\r\n            >\r\n              <input\r\n                type=\"text\"\r\n                name={`${fieldName}[${index}].postal_code`}\r\n                id={`${fieldName}[${index}].postal_code`}\r\n                autoComplete=\"postal-code\"\r\n                className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\r\n                ref={register()}\r\n                defaultValue={postal_code}\r\n              />\r\n            </Label>\r\n\r\n            <div className=\"col-span-6\" aria-hidden=\"true\">\r\n              <div className=\"py-5\">\r\n                <div className=\"border-t border-gray-200\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Addresses;\r\n","import { useFormContext } from \"react-hook-form\";\r\nimport Addresses from \"./Addresses\";\r\nimport Label from \"./Label\";\r\n\r\nconst Fields: React.FC = () => {\r\n  const { register } = useFormContext();\r\n\r\n  return (\r\n    <div className=\"px-4 py-5 bg-white sm:p-6\">\r\n      <div className=\"grid grid-cols-6 gap-6\">\r\n        <Label\r\n          title=\"First name\"\r\n          htmlFor=\"first_name\"\r\n          className=\"sm:col-span-3\"\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            name=\"first_name\"\r\n            id=\"first_name\"\r\n            autoComplete=\"given-name\"\r\n            className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\r\n            ref={register}\r\n          />\r\n        </Label>\r\n\r\n        <Label title=\"Last name\" htmlFor=\"last_name\" className=\"sm:col-span-3\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"last_name\"\r\n            id=\"last_name\"\r\n            autoComplete=\"family-name\"\r\n            className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\r\n            ref={register}\r\n          />\r\n        </Label>\r\n\r\n        <Label\r\n          title=\"Email address\"\r\n          htmlFor=\"email_address\"\r\n          className=\"sm:col-span-4\"\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            name=\"email_address\"\r\n            id=\"email_address\"\r\n            autoComplete=\"email\"\r\n            className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\r\n            ref={register}\r\n          />\r\n        </Label>\r\n\r\n        <Label\r\n          title=\"Country / Region\"\r\n          htmlFor=\"country\"\r\n          className=\"sm:col-span-3\"\r\n        >\r\n          <select\r\n            id=\"country\"\r\n            name=\"country\"\r\n            autoComplete=\"country\"\r\n            className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\r\n            ref={register}\r\n          >\r\n            <option>United States</option>\r\n            <option>Canada</option>\r\n            <option>Mexico</option>\r\n          </select>\r\n        </Label>\r\n      </div>\r\n\r\n      <Addresses />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Fields;\r\n","interface IProps {\r\n  onSubmit: () => void;\r\n}\r\n\r\nconst Form: React.FC<IProps> = ({ children, onSubmit }) => {\r\n  return (\r\n    <form className=\"mt-5 md:mt-0 md:col-span-2\" onSubmit={onSubmit}>\r\n      <div className=\"shadow overflow-hidden sm:rounded-md\">{children}</div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","const Layout: React.FC = ({ children }) => {\r\n  return (\r\n    <div className=\"bg-gray-100 min-h-screen\">\r\n      <div className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\r\n        <div className=\"mt-10 sm:mt-0\">\r\n          <div className=\"md:grid md:grid-cols-3 md:gap-6\">{children}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import { useFormContext } from \"react-hook-form\";\r\n\r\nconst Sidebar: React.FC = () => {\r\n  const { watch } = useFormContext();\r\n  const fields = watch();\r\n\r\n  return (\r\n    <div className=\"md:col-span-1\">\r\n      <div className=\"px-4 sm:px-0\">\r\n        <h3 className=\"text-lg font-medium leading-6 text-gray-900\">\r\n          Personal Information\r\n        </h3>\r\n        <p className=\"mt-1 text-sm text-gray-600\">\r\n          Use a permanent address where you can receive mail.\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"bg-gray-500 text-white p-4 mt-8\">\r\n        <code className=\"whitespace-pre-wrap break-words\">\r\n          {JSON.stringify(fields, null, \"  \")}\r\n        </code>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import { FormProvider, useForm } from \"react-hook-form\";\r\n\r\nimport ActionButtons from \"./components/ActionButtons\";\r\nimport Fields from \"./components/Fields\";\r\nimport Form from \"./components/Form\";\r\nimport Layout from \"./components/Layout\";\r\nimport Sidebar from \"./components/Sidebar\";\r\n\r\nexport type directionType = {\r\n  street_address: string;\r\n  city: string;\r\n  state: string;\r\n  postal_code: string;\r\n};\r\n\r\nexport const defaultDirection = {\r\n  street_address: \"\",\r\n  city: \"\",\r\n  state: \"\",\r\n  postal_code: \"\",\r\n};\r\n\r\nexport const defaultValues = {\r\n  country: \"United States\",\r\n  email_address: \"\",\r\n  first_name: \"\",\r\n  last_name: \"\",\r\n  directions: [defaultDirection] as directionType[],\r\n};\r\n\r\nfunction App() {\r\n  const methods = useForm({\r\n    defaultValues,\r\n  });\r\n\r\n  const onSubmit = methods.handleSubmit((data) => {\r\n    alert(JSON.stringify(data, null, 4));\r\n  });\r\n\r\n  return (\r\n    <FormProvider {...methods}>\r\n      <Layout>\r\n        <Sidebar />\r\n        <Form onSubmit={onSubmit}>\r\n          <Fields />\r\n          <ActionButtons />\r\n        </Form>\r\n      </Layout>\r\n    </FormProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}